<?php

App::uses('AppModel', 'Model');

/**
 * Country Model
 *
 * @property State $State
 */
class Country extends AppModel {

    /**
     * hasMany associations
     *
     * @var array
     */
    public $hasMany = array(
        'State' => array(
            'className' => 'State',
            'foreignKey' => 'country_id',
            'dependent' => false,
            'conditions' => '',
            'fields' => '',
            'order' => '',
            'limit' => '',
            'offset' => '',
            'exclusive' => '',
            'finderQuery' => '',
            'counterQuery' => ''
        )
    );

    /**
     * Get all countries
     */
    public function getAllCountries() {
        return $this->find('list', array(
                    'fields' => array('id', 'short_name'),
                    'order' => array('Country.id = 233 DESC',
                     'Country.short_name ASC'),
        ));
    }
    
    /**
     * Get all states in a country
     */
    public function getCountryStates($countryId) {
        $data = $this->State->find('list', array(
            'fields' => array('State.description'),
            'conditions' => array('country_id' => $countryId),
        ));

        return $data;
    }

	/**
	 * Function to get the list of countries and the regex to validate the
	 * post code of the country
	 */
	public static function getCountryPostCodeRegexList() {
		$countryPostCodeRegexList = array(
			'AD' => 'AD[1-7]0\d',
			'AF' => '\d{4}',
			'AI' => '2640',
			'AL' => '\d{4}',
			'AM' => '(37)?\d{4}',
			'AR' => '((?:[A-HJ-NP-Z])?\d{4})([A-Z]{3})?',
			'AS' => '(96799)(?:[ \-](\d{4}))?',
			'AT' => '\d{4}',
			'AU' => '\d{4}',
			'AX' => '22\d{3}',
			'AZ' => '\d{4}',
			'BA' => '\d{5}',
			'BB' => '(?:BB\d{5})?',
			'BD' => '\d{4}',
			'BE' => '\d{4}',
			'BG' => '\d{4}',
			'BH' => '(?:(?:\d|1[0-2])\d{2})?',
			'BL' => '(9[78][01]\d{2})',
			'BM' => '[A-Z]{2}[ ]?[A-Z0-9]{2}',
			'BN' => '[A-Z]{2}[ ]?\d{4}',
			'BR' => '\d{5}[\-]?\d{3}',
			'BT' => '\d{5}',
			'BY' => '\d{6}',
			'CA' => '[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][ ]?\d[ABCEGHJ-NPRSTV-Z]\d',
			'CC' => '6799',
			'CH' => '\d{4}',
			'CK' => '\d{4}',
			'CL' => '\d{7}',
			'CN' => '\d{6}',
			'CO' => '\d{6}',
			'CR' => '\d{4,5}|\d{3}-\d{4}',
			'IR' => '\d{5}[\-]?\d{5}',
			'CV' => '\d{4}',
			'CX' => '6798',
			'CY' => '\d{4}',
			'CZ' => '\d{3}[ ]?\d{2}',
			'DE' => '\d{5}',
			'DK' => '\d{4}',
			'DO' => '\d{5}',
			'DZ' => '\d{5}',
			'EC' => '(?:[A-Z]\d{4}[A-Z]|(?:[A-Z]{2})?\d{6})?',
			'EE' => '\d{5}',
			'EG' => '\d{5}',
			'EH' => '\d{5}',
			'ES' => '\d{5}',
			'ET' => '\d{4}',
			'FI' => '\d{5}',
			'FK' => 'FIQQ 1ZZ',
			'FM' => '(9694[1-4])(?:[ \-](\d{4}))?',
			'FO' => '\d{3}',
			'FR' => '\d{2}[ ]?\d{3}',
			'UK' => '(GIR[ ]?0AA|((AB|AL|B|BA|BB|BD|BH|BL|BN|BR|BS|BT|BX|CA|CB|CF|CH|CM|CO|CR|CT|CV|CW|DA|DD|DE|DG|DH|DL|DN|DT|DY|E|EC|EH|EN|EX|FK|FY|G|GL|GY|GU|HA|HD|HG|HP|HR|HS|HU|HX|IG|IM|IP|IV|JE|KA|KT|KW|KY|L|LA|LD|LE|LL|LN|LS|LU|M|ME|MK|ML|N|NE|NG|NN|NP|NR|NW|OL|OX|PA|PE|PH|PL|PO|PR|RG|RH|RM|S|SA|SE|SG|SK|SL|SM|SN|SO|SP|SR|SS|ST|SW|SY|TA|TD|TF|TN|TQ|TR|TS|TW|UB|W|WA|WC|WD|WF|WN|WR|WS|WV|YO|ZE)(\\d[\\dA-Z]?[ ]?\\d[ABD-HJLN-UW-Z]{2}))|BFPO[ ]?\\d{1,4})',
			'GE' => '\d{4}',
			'GF' => '9[78]3\d{2}',
			'GG' => 'GY\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}',
			'GI' => 'GX11 1AA',
			'GL' => '39\d{2}',
			'GN' => '\d{3}',
			'GP' => '9[78][01]\d{2}',
			'GR' => '\d{3} ?\d{2}',
			'GS' => 'SIQQ 1ZZ',
			'GT' => '\d{5}',
			'GU' => '(969(?:[12]\d|3[12]))(?:[ \-](\d{4}))?',
			'GW' => '\d{4}',
			'GA' => '\d{4}',
			'HN' => '(?:\d{5})?',
			'HR' => '\d{5}',
			'HT' => '\d{4}',
			'HU' => '\d{4}',
			'ID' => '\d{5}',
			'IL' => '\d{5}(?:\d{2})?',
			'IM' => 'IM\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}',
			'IN' => '\d{6}',
			'CU' => '\d{5}',
			'IQ' => '\d{5}',
			'IS' => '\d{3}',
			'IT' => '\d{5}',
			'JE' => 'JE\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}',
			'JO' => '\d{5}',
			'JP' => '\d{3}-?\d{4}',
			'KE' => '\d{5}',
			'KG' => '\d{6}',
			'KH' => '\d{5}',
			'KR' => '\d{3}[\-]\d{3}',
			'KW' => '\d{5}',
			'KY' => 'KY\d-\d{4}',
			'KZ' => '\d{6}',
			'LA' => '\d{5}',
			'LB' => '(?:(?:\d{4})(?:[ ]?(?:\d{4}))?)?',
			'LI' => '((948[5-9])|(949[0-8]))',
			'LK' => '\d{5}',
			'LR' => '\d{4}',
			'LS' => '\d{3}',
			'LT' => '\d{5}',
			'LU' => '\d{4}',
			'LV' => 'LV-\d{4}',
			'MA' => '\d{5}',
			'MC' => '980\d{2}',
			'MD' => '\d{4}',
			'ME' => '8\d{4}',
			'MF' => '9[78][01]\d{2}',
			'MG' => '\d{3}',
			'MH' => '(969[67]\d)(?:[ \-](\d{4}))?',
			'MK' => '\d{4}',
			'MN' => '\d{5}',
			'MP' => '(9695[012])(?:[ \-](\d{4}))?',
			'MQ' => '9[78]2\d{2}',
			'MT' => '[A-Z]{3}[ ]?\d{2,4}',
			'MU' => '(?:\d{3}[A-Z]{2}\d{3})?',
			'MV' => '\d{5}',
			'MX' => '\d{5}',
			'MY' => '\d{5}',
			'MZ' => '\d{4}',
			'NC' => '988\d{2}',
			'NE' => '\d{4}',
			'NF' => '2899',
			'NG' => '(?:\d{6})?',
			'NI' => '\d{5}',
			'NL' => '\d{4}[ ]?[A-Z]{2}',
			'NO' => '\d{4}',
			'NP' => '\d{5}',
			'NZ' => '\d{4}',
			'OM' => '(PC )?\d{3}',
			'PE' => '(?:LIMA \d|CALLAO 0?)\d|[0-2]\d{4}',
			'PF' => '987\d{2}',
			'PG' => '\d{3}',
			'PH' => '\d{4}',
			'PK' => '\d{5}',
			'PL' => '\d{2}-\d{3}',
			'PM' => '9[78]5\d{2}',
			'PN' => 'PCRN 1ZZ',
			'PR' => '(00[679]\d{2})(?:[ \-](\d{4}))?',
			'PT' => '\d{4}-\d{3}',
			'PW' => '(969(?:39|40))(?:[ \-](\d{4}))?',
			'PY' => '\d{4}',
			'RE' => '9[78]4\d{2}',
			'RO' => '\d{6}',
			'RS' => '\d{5,6}',
			'RU' => '\d{6}',
			'SA' => '\d{5}',
			'SE' => '\d{3}[ ]?\d{2}',
			'SG' => '\d{6}',
			'SH' => '(ASCN|STHL) 1ZZ',
			'SI' => '\d{4}',
			'SJ' => '\d{4}',
			'SK' => '\d{3}[ ]?\d{2}',
			'SM' => '4789\d',
			'SN' => '\d{5}',
			'SO' => '\d{5}',
			'SV' => 'CP [1-3][1-7][0-2]\d',
			'SZ' => '[HLMS]\d{3}',
			'TD' => '\d{5}',
			'TC' => 'TKCA 1ZZ',
			'TH' => '\d{5}',
			'TJ' => '\d{6}',
			'TM' => '\d{6}',
			'TN' => '\d{4}',
			'TR' => '\d{5}',
			'TW' => '\d{3}(\d{2})?',
			'TZ' => '\d{4}',
			'UA' => '\d{5}',
			'BO' => '\d{4}',
			'US' => '(\d{5})(?:[ \-](\d{4}))?',
			'UY' => '\d{5}',
			'UZ' => '\d{6}',
			'VA' => '00120',
			'VC' => 'VC\d{4}',
			'VE' => '\d{4}',
			'VG' => 'VG\d{4}',
			'VI' => '(008(?:(?:[0-4]\d)|(?:5[01])))(?:[ \-](\d{4}))?',
			'VN' => '\d{6}',
			'WF' => '986\d{2}',
			'XK' => '[1-7]\d{4}',
			'YT' => '976\d{2}',
			'ZA' => '\d{4}',
			'ZM' => '\d{5}',
			'JM' => 'JM[A-D][A-Z]{2}\d{2}',
			'LY' => '\d{5}',
			'MM' => '\d{5}',
			'NA' => '\d{5}',
			'PA' => '\d{6}',
			'SD' => '\d{5}',
			'TT' => '\d{6}',
			'CM' => '[+]237',
			'HK' => '999077'
		);
		return $countryPostCodeRegexList;
	}

	/**
	 * Function to get the list of country id and the regex to validate the
	 * post code of the country
	 */
	public static function getCountryIdZipRegexList() {
		$countryIdPostCodeRegexList = array(
			6 => 'AD[1-7]0\d',
			1 => '\d{4}',
			8 => '2640',
			3 => '\d{4}',
			12 => '(37)?\d{4}',
			11 => '((?:[A-HJ-NP-Z])?\d{4})([A-Z]{3})?',
			5 => '(96799)(?:[ \-](\d{4}))?',
			15 => '\d{4}',
			14 => '\d{4}',
			2 => '22\d{3}',
			16 => '\d{4}',
			29 => '\d{5}',
			20 => '(?:BB\d{5})?',
			19 => '\d{4}',
			22 => '\d{4}',
			33 => '\d{4}',
			18 => '(?:(?:\d|1[0-2])\d{2})?',
			182 => '(9[78][01]\d{2})',
			25 => '[A-Z]{2}[ ]?[A-Z0-9]{2}',
			32 => '[A-Z]{2}[ ]?\d{4}',
			31 => '\d{5}[\-]?\d{3}',
			26 => '\d{5}',
			21 => '\d{6}',
			38 => '[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][ ]?\d[ABCEGHJ-NPRSTV-Z]\d',
			46 => '6799',
			213 => '\d{4}',
			51 => '\d{4}',
			43 => '\d{7}',
			44 => '\d{6}',
			47 => '\d{6}',
			52 => '\d{4,5}|\d{3}-\d{4}',
			102 => '\d{5}[\-]?\d{5}',
			39 => '\d{4}',
			45 => '6798',
			57 => '\d{4}',
			58 => '\d{3}[ ]?\d{2}',
			81 => '\d{5}',
			59 => '\d{4}',
			62 => '\d{5}',
			4 => '\d{5}',
			63 => '(?:[A-Z]\d{4}[A-Z]|(?:[A-Z]{2})?\d{6})?',
			68 => '\d{5}',
			64 => '\d{5}',
			242 => '\d{5}',
			206 => '\d{5}',
			69 => '\d{4}',
			73 => '\d{5}',
			70 => 'FIQQ 1ZZ',
			143 => '(9694[1-4])(?:[ \-](\d{4}))?',
			71 => '\d{3}',
			74 => '\d{2}[ ]?\d{3}',
			232 => '(GIR[ ]?0AA|((AB|AL|B|BA|BB|BD|BH|BL|BN|BR|BS|BT|BX|CA|CB|CF|CH|CM|CO|CR|CT|CV|CW|DA|DD|DE|DG|DH|DL|DN|DT|DY|E|EC|EH|EN|EX|FK|FY|G|GL|GY|GU|HA|HD|HG|HP|HR|HS|HU|HX|IG|IM|IP|IV|JE|KA|KT|KW|KY|L|LA|LD|LE|LL|LN|LS|LU|M|ME|MK|ML|N|NE|NG|NN|NP|NR|NW|OL|OX|PA|PE|PH|PL|PO|PR|RG|RH|RM|S|SA|SE|SG|SK|SL|SM|SN|SO|SP|SR|SS|ST|SW|SY|TA|TD|TF|TN|TQ|TR|TS|TW|UB|W|WA|WC|WD|WF|WN|WR|WS|WV|YO|ZE)(\\d[\\dA-Z]?[ ]?\\d[ABD-HJLN-UW-Z]{2}))|BFPO[ ]?\\d{1,4})',
			80 => '\d{4}',
			75 => '9[78]3\d{2}',
			90 => 'GY\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}',
			83 => 'GX11 1AA',
			85 => '39\d{2}',
			91 => '\d{3}',
			87 => '9[78][01]\d{2}',
			84 => '\d{3} ?\d{2}',
			204 => 'SIQQ 1ZZ',
			89 => '\d{5}',
			88 => '(969(?:[12]\d|3[12]))(?:[ \-](\d{4}))?',
			92 => '\d{4}',
			78 => '\d{4}',
			96 => '(?:\d{5})?',
			54 => '\d{5}',
			94 => '\d{4}',
			98 => '\d{4}',
			101 => '\d{5}',
			106 => '\d{5}(?:\d{2})?',
			105 => 'IM\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}',
			100 => '\d{6}',
			55 => '\d{5}',
			103 => '\d{5}',
			99 => '\d{3}',
			107 => '\d{5}',
			110 => 'JE\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}',
			111 => '\d{5}',
			109 => '\d{3}-?\d{4}',
			113 => '\d{5}',
			119 => '\d{6}',
			36 => '\d{5}',
			116 => '\d{3}[\-]\d{3}',
			118 => '\d{5}',
			40 => 'KY\d-\d{4}',
			112 => '\d{6}',
			120 => '\d{5}',
			122 => '(?:(?:\d{4})(?:[ ]?(?:\d{4}))?)?',
			126 => '((948[5-9])|(949[0-8]))',
			207 => '\d{5}',
			124 => '\d{4}',
			123 => '\d{3}',
			127 => '\d{5}',
			128 => '\d{4}',
			121 => 'LV-\d{4}',
			149 => '\d{5}',
			145 => '980\d{2}',
			144 => '\d{4}',
			147 => '8\d{4}',
			186 => '9[78][01]\d{2}',
			131 => '\d{3}',
			137 => '(969[67]\d)(?:[ \-](\d{4}))?',
			130 => '\d{4}',
			146 => '\d{5}',
			162 => '(9695[012])(?:[ \-](\d{4}))?',
			138 => '9[78]2\d{2}',
			136 => '[A-Z]{3}[ ]?\d{2,4}',
			140 => '(?:\d{3}[A-Z]{2}\d{3})?',
			134 => '\d{5}',
			142 => '\d{5}',
			133 => '\d{5}',
			150 => '\d{4}',
			155 => '988\d{2}',
			158 => '\d{4}',
			161 => '2899',
			159 => '(?:\d{6})?',
			157 => '\d{5}',
			154 => '\d{4}[ ]?[A-Z]{2}',
			163 => '\d{4}',
			153 => '\d{5}',
			156 => '\d{4}',
			164 => '(PC )?\d{3}',
			171 => '(?:LIMA \d|CALLAO 0?)\d|[0-2]\d{4}',
			76 => '987\d{2}',
			169 => '\d{3}',
			172 => '\d{4}',
			165 => '\d{5}',
			174 => '\d{2}-\d{3}',
			187 => '9[78]5\d{2}',
			173 => 'PCRN 1ZZ',
			176 => '(00[679]\d{2})(?:[ \-](\d{4}))?',
			175 => '\d{4}-\d{3}',
			166 => '(969(?:39|40))(?:[ \-](\d{4}))?',
			170 => '\d{4}',
			178 => '9[78]4\d{2}',
			179 => '\d{6}',
			194 => '\d{5,6}',
			180 => '\d{6}',
			192 => '\d{5}',
			212 => '\d{3}[ ]?\d{2}',
			197 => '\d{6}',
			183 => '(ASCN|STHL) 1ZZ',
			200 => '\d{4}',
			210 => '\d{4}',
			199 => '\d{3}[ ]?\d{2}',
			190 => '4789\d',
			193 => '\d{5}',
			202 => '\d{5}',
			65 => 'CP [1-3][1-7][0-2]\d',
			211 => '[HLMS]\d{3}',
			42 => '\d{5}',
			227 => 'TKCA 1ZZ',
			218 => '\d{5}',
			216 => '\d{6}',
			226 => '\d{6}',
			224 => '\d{4}',
			225 => '\d{5}',
			215 => '\d{3}(\d{2})?',
			217 => '\d{4}',
			230 => '\d{5}',
			27 => '\d{4}',
			233 => '(\d{5})(?:[ \-](\d{4}))?',
			234 => '\d{5}',
			235 => '\d{6}',
			95 => '00120',
			188 => 'VC\d{4}',
			237 => '\d{4}',
			239 => 'VG\d{4}',
			240 => '(008(?:(?:[0-4]\d)|(?:5[01])))(?:[ \-](\d{4}))?',
			238 => '\d{6}',
			241 => '986\d{2}',
			117 => '[1-7]\d{4}',
			141 => '976\d{2}',
			203 => '\d{4}',
			244 => '\d{5}',
			108 => 'JM[A-D][A-Z]{2}\d{2}',
			125 => '\d{5}',
			151 => '\d{5}',
			152 => '\d{5}',
			168 => '\d{6}',
			208 => '\d{5}',
			223 => '\d{6}',
			37 => '[+]237',
			97 => '999077'
		);
		return $countryIdPostCodeRegexList;
	}

	/**
	 * Function to check if zip is required for a a country
	 * 
	 * @param int $countryId
	 * @return boolean
	 */
	private function __isCountryZipRequired($countryId) {
		$countryIdPostCodeRegexList = $this->getCountryIdZipRegexList();
		if (isset($countryIdPostCodeRegexList[$countryId])) {
			$isZipMandatory = true;
		} else {
			$isZipMandatory = false;
		}
		return $isZipMandatory;
	}

	/**
	 * Function to get mandatory class for zip for a country
	 * 
	 * Determines whether to show or hide zip mandatory marking
	 * 
	 * @param int $countryId
	 * @return string
	 */
	public function getZipMandatoryClass($countryId) {
		$zipMandatoryClass = '';
		if (!$this->__isCountryZipRequired($countryId)) {
			$zipMandatoryClass = 'hide';
		}
		return $zipMandatoryClass;
	}
}